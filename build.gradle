plugins {
    id 'application'
    id 'java'
}

group 'com.mindmorphosis.protoc.gen.http'
version '1.0.0'

application {
    mainClassName = 'com.mindmorphosis.protoc.gen.http.PluginMain'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.mindmorphosis.protoc.gen.http.PluginMain'
    }
}

repositories {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
        mavenLocal()
    }
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation 'com.google.protobuf:protobuf-java:3.20.3'
    implementation group: 'com.google.http-client', name: 'google-http-client', version: '1.43.1'
    implementation group: 'com.google.api.grpc', name: 'grpc-google-common-protos', version: '2.14.3'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.26'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.26'
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


// 构建proto文件
tasks.register('generateProto', Exec) {
    doFirst {
        def thirdPartyProtoPath = './src/third_party/'
        def outputJavaPath = './src/main/java'

        // 设置命令和参数
        def commandArg = ['cmd', '/c', 'protoc',
                '--proto_path=.',
                "--proto_path=${thirdPartyProtoPath}",
                "--plugin=protoc-gen-java-http=.\\bin\\protoc-gen-java-http.bat",
                "--java_out=${outputJavaPath}",
                "--java-http_out=${outputJavaPath}",
                "t.proto"
        ]

        println "Executing command: ${commandArg.join(' ')}"

        commandLine commandArg
    }
}
